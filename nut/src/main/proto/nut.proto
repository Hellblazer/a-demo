syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.hellblazer.nut.proto";
option java_outer_classname = "NutProto";
option objc_class_prefix = "Nut";
import "google/protobuf/empty.proto";

import "crypto.proto";

package com.hellblazer.nut;

service Sphynx {
  rpc apply(EncryptedShare) returns(Status) {}
  rpc unwrap(google.protobuf.Empty) returns(UnwrapStatus){}
  rpc seal(google.protobuf.Empty) returns(Status) {}
  rpc unseal(google.protobuf.Empty) returns(Status) {}
  rpc sessionKey(google.protobuf.Empty) returns(PublicKey_) {}
  rpc identifier(google.protobuf.Empty) returns (crypto.Digeste) {}
}

message EncryptedShare {
  bytes encapsulation = 1;
  bytes iv = 2;
  bytes associatedData = 3;
  bytes share = 4;
}

message Share {
  int32 key = 1;
  bytes share = 2;
}

message Status {
  bool success = 1;
  int32 shares = 2;
  string message = 3;
}

message UnwrapStatus {
  bool success = 1;
  int32 shares = 2;
  string message = 3;
  crypto.Digeste identifier = 4;
}

message PublicKey_ {
  enum algo {
    INVALID = 0;
    X25519 = 1;
    X448 = 2;
  }
  algo algorithm = 1;
  bytes publicKey = 2;
}

message FernetAttestation {
  string token = 1;
}

message NamespacedId_ {
    uint64 namespace = 1;
    uint64 id = 2;
    uint64 relation = 3;
}

message InitialProvisioning {
  // namespace to use
  uint64 namespace = 1;
  // relationships to assert with the newly minted subject
  repeated uint64 relationships = 2;
  // relationship mappings to other subjects to assert with the newly minted subject
  map<uint64, uint64> mappings = 3;
  // relationship assertions to map to objects
  map<uint64, uint64> assertions = 4;
}

message Namespaced_ {
  uint64 namespace = 1;
  string name = 2;
  uint64 relationship = 3;
}

message IiAttestation_ {
  enum signature_type {
    INVALID = 0;
    PKCS7 = 1;
    BASE64 = 2;
    RSA2048 = 3;
  }
  string document = 1;
  string signature = 2;
}
